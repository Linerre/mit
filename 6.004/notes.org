#+TITLE: Notes on Computation Structures
#+AUTHOR: Linerre <zlinerre@gmail.com>
#+OPTIONS: ^:{}
* Announcement
The course was previously known as 6.004 and now its course code has changed to 6.191.  As mentioned by the course's [[https://6191.mit.edu/fall23][official site]]:

#+BEGIN_QUOTE
Welcome to the Fall 2023 semester of 6.1910 which we will call 6.191 (also known as 6.004)!
#+END_QUOTE


* Versions
There are a couple of versions available for this course.  The table below lists a few that can be easily found by a single Google search.

| Year | Site        | Materials             | Lecture Videos |
|------+-------------+-----------------------+----------------|
| 2009 | [[https://ocw.mit.edu/courses/6-004-computation-structures-spring-2009/][2009-Spring]] | [[https://ocw.mit.edu/courses/6-004-computation-structures-spring-2009/download/][MIT OpenCourseWare]]    | NA             |
| 2017 | [[https://ocw.mit.edu/courses/6-004-computation-structures-spring-2017/][2017-Spring]] | [[https://ocw.mit.edu/courses/6-004-computation-structures-spring-2017/pages/syllabus/][MIT OpenCourseWare]][1] | [[https://youtube.com/playlist?list=PLUl4u3cNGP62WVs95MNq3dQBqY2vGOtQ2&si=KLMhgGDRrluA7D_a][YouTube]]        |
| 2018 | NA          | [[https://6191.mit.edu/fall23/resources][6.191 Resources]]       | [[https://youtube.com/playlist?list=PLDSlqjcPpoL64CJdF0Qee5oWqGS6we_Yu&si=JvM51x8XKzCZoZii][YouTube]][2]     |
| 2019 | NA          | [[https://6191.mit.edu/fall23/resources/sp23][6.191 Archives (sp23)]] | [[https://www.youtube.com/playlist?list=PLmQZXrtupiSYcziH3iZZoGTng1D0UnsFJ][YouTube]][3]     |
|------+-------------+-----------------------+----------------|
- [1] The annotated slides are embedded in each lecture.  Navigate the left sidebar to find them.
- [2] The official site (https://6004.mit.edu/web/fall18/resources) mentioned in the video list is /not/ accessible to non-mit students, but under the "Material" tab the required/needed resources are available for download.
- [3] *This is the version I'm learning.*
- [+] Stanford hosts an all-in-one lecture notes in [[https://web.stanford.edu/~lindrew/6.004.pdf][PDF]] for 2020 version of this course.

Matthew Towers in his [[https://www.homepages.ucl.ac.uk/~ucahmto/elearning/2020/04/13/6.004_and_CS143.html][6.004 and CS143 (Compilers)]] post gives a quick rundown of different 6.004 versions and (possible) reasons for why the later versions become more inaccessible (mainly, academic integrity).

In subreddit r/mit there is [[https://www.reddit.com/r/mit/comments/c1nsl3/mit_6004/][this thread]] where different versions were discussed and suggestions were given to students based on their backgrounds (i.e. computer science v.s. electrical engineering).


* Schedule
:LOGBOOK:
CLOCK: [2023-12-22 Fri 15:26]--[2023-12-22 Fri 17:14] =>  1:48
:END:

** Summary
2 lectures and 1 lab each week, as illustrated at [[https://6191.mit.edu/fall23/schedule]]

About 23 topics in total.  The course is usually delivered in Fall and Spring semesters.


** Timetable

#+ORGTBL: SEND lectures orgtbl-to-orgtbl :splice nil :skip 0
| Lec | Topic                                         |      Start |       Done |
|-----+-----------------------------------------------+------------+------------|
| L1  | Course Mechanics & Digital Abstraction        | 2023-12-22 | 2023-12-22 |
| L2  | Combinational Devices & Boolean Algebra       |            |            |
| L2  | Combinational Design & Intro to Minispec      |            |            |
| L4  | Adv Minispec & Combinational Design Tradeoffs |            |            |
| L5  | CMOS                                          |            |            |
| L6  | equential Circuits & Finite State Machines    |            |            |
| L7  | Impl-ing Sequential Circuits in Minispec      |            |            |
| L8  | Arithmetic Pipelines                          |            |            |
| L9  | Design Tradeoffs                              |            |            |
| L10 | Compilers and RISC-V Assembly                 |            |            |
| L11 | Single Cycle Processor                        |            |            |
| L12 | Memory Hierarchy                              |            |            |
| L13 | Caches                                        |            |            |
| L14 | Pipelined Processors 1                        |            |            |
| L15 | Pipelined Processors 2                        |            |            |
| L16 | OS                                            |            |            |
| L17 | Virtual Memory 1                              |            |            |
| L18 | Virtual Memory 2                              |            |            |
| L19 | Exceptions, I/O                               |            |            |
| L20 | Parallel Processing                           |            |            |
| L21 | Synchronization                               |            |            |
| L22 | Cache Coherence                               |            |            |
| L23 | Modern Processor Architecture                 |            |            |
|-----+-----------------------------------------------+------------+------------|

*NOTE*: Labs are accessible to MIT students only.  Non-MIT students should consider doing the [[http://csg.csail.mit.edu/6.175/labs.html][labs of 6.175]] instead, because that course has the same instructor and textbook as 6.004 as well as very similar labs.

#+ORGTBL: labs
| Lab | Topic                    | out | due      |
|-----+--------------------------+-----+----------|
|   1 | Combinational            | L3  | L5       |
|   2 | Arithmetic Logic Unit    | L4  | L7       |
|   3 | Sequential Circuits      | L7  | L10      |
|   4 | Processor Implementation | L11 | L14      |
|   5 | Caches                   | L13 | L16      |
|   6 | Pipelined Processor      | L14 | L20      |
|   7 | Operating Systems        | L16 | L22      |
|   d | Design Project           | L20 | L23+1[+] |
|-----+--------------------------+-----+----------|
- [+] One week after L23


** L1
In the early days people stood in the "bit" to fix it because the machine was huge. Now it is tiny.

Later people found not only data, but also programs could be stored in memory.  Data in memory is read from or written to, but the actual computing is done in registers.  Each register is of fixed size, say 32 bits.  Number of registers is small (limitation), say 32.
- Ld x M[a] (load: read data from memory to register)
- St M[a] x (Store: put data back from register to memory)


An abstracted MicroProcessor is depicted at [[https://youtu.be/n-YWa8hTdH8?si=PisuU1o9pxuod5Hl&t=1291][21:31]] of the first lecture.

Assembly (Machine) Language is a sequence of instructions which execute in a sequential order unless a control transfer instruction ix executed.  Each instruction specifies one of the following:
- ALU or Reg-to-Reg operation
- Ld
- St
- Control transfer operation: e.g. xi < xj go to label l

Assembly language is not designed so that it is "easy to program".  The two points to consider are:
1. suitable for implementing in hardware
2. able to translate high level notations to low level instructions, i.e. a target of some high-level language (see [[https://youtu.be/n-YWa8hTdH8?si=jfmP-_qsanIs7bXJ&t=2558][42:38]])


In general, the course consists of the following modules:
1. RISC-V Intro
   - Introduction to RISC-V and Assembly Language programming in RISC-V
   - Expressing high-level programming in Assembly language
   - Procedure calling convention
2. Bluespec
   - Boolean algebra and combinational logic
   - Sequential logic
   - Expressing logic designs in Bluespec
   - Pipelined and folded circuits
3. Implement RISC-V
   - Implement non-pipelined RISC-V computer
   - Caches
   - Implement pipelined RISC-V computer
   - Branch prediction (time-permitting)
4. OS
   - Operating systems
   - IO
   - Virtual memory


This course relies on [[https://youtu.be/n-YWa8hTdH8?t=2862&si=ocxGOJJxXyDiHKQ4][Modern Design Tools]] (from high-level to circuit description)

[[https://youtu.be/n-YWa8hTdH8?t=3172&si=TqwmwKV_PnP3nBXF][Grading]] is mentioned at the last.


** L2 RISC-V & Assembly
The 2019 Spring Lecture 2 now corresponds to Lecture 10 of [[https://6191.mit.edu/_static/fall23/resources/sp23/L10.pdf][Fall 2023]]
Memory: Large but slow
Registers: Fast but small (a limited number of them)

*** word and byte
This class focuses on the base integer 32-bit variant: RV32I processor

word = 32 bits (memory location/address)
byte = 8 bits (memory is also byte addressable)
word = 4 bytes


*** Instructions
~slt~ instruction looks very like the comparison behavior/logic of C/Java functions where one of 1 (less) or 0 (not) is returned as the result.


*** Binary Notation (base2)
To handle overflow when using fixed-number bits: with N-bit numbers, equivalent to following all operations with mod 2^{N}.
#+BEGIN_EXAMPLE
Given 3-number bits, the max number representation is 7 (111). To represent the result of 5 + 6, use (5 + 6) mod 2^{3} = 3 (011)
#+END_EXAMPLE


*** Hexadecimal Notation (base16)
To handle long strings of bits (tedious and error-prone), use hexadecimal or so called base16: Each group of 4 adjacent bits encoded into one single hexadecimal digit:
#+BEGIN_EXAMPLE
0b: 0111 1101 0000
0x   7    D    0
#+END_EXAMPLE

Better to get really familiar with the table below
#+NAME: Binary, Hexadecima, Decimal
| Binary | Hexa | Decimal |
|--------+------+---------|
|   0000 |    0 |       0 |
|   0001 |    1 |       1 |
|   0010 |    2 |       2 |
|   0011 |    3 |       3 |
|   0100 |    4 |       4 |
|   0101 |    5 |       5 |
|   0110 |    6 |       6 |
|   0111 |    7 |       7 |
|   1000 |    8 |       8 |
|   1001 |    9 |       9 |
|   1010 |    A |      10 |
|   1011 |    B |      11 |
|   1100 |    C |      12 |
|   1101 |    D |      13 |
|   1110 |    E |      14 |
|   1111 |    F |      15 |
|--------+------+---------|


*** Register-Immediate Instructions
One operand comes from a register and the other is small constant hardcoded into the instruction.
#+BEGIN_EXAMPLE
the `i' means `immediate'
addi x3, x1, 3 ==========> x3 <- x1 + 3
andi x3, x1, 3 ==========> x3 <- x1 & 3
slli x3, x1, 3 ==========> x3 <- x1 << 3
#+END_EXAMPLE
No subi, use negative constant instead
#+BEGIN_EXAMPLE
addi x3, x1, 3 ==========> x3 <- x1 - 3
#+END_EXAMPLE

*** Compound Computation
- Break up complex expressions into *basic computations* because the available instructions support only two source operands and one destination operand (aka 3-address instructions)
- Given a computation ~a = ((b+3) >> c) - 1;~, break it up to
  #+BEGIN_EXAMPLE
  t0 = b + 3;
  t1 = t0 >> c;
  a = t1 -1;
  #+END_EXAMPLE

#+BEGIN_SRC assembly
addi x4, x2, 3
srl x5, x4, x3
addi x1, x5, -1
#+END_SRC

*** Control Flow Instructions
Format: ~comp src1, src2, label~
Performs comparison first to determine if branch is taken or not

#+NAME: comparison ix
| Instructions | beq | ben | blt | bge | bltu | bgeu |
|--------------+-----+-----+-----+-----+------+------|
| comp         | ==  | !=  | <   | >=  | <    | >=   |
|--------------+-----+-----+-----+-----+------+------|

See an example at [[https://youtu.be/41RyDXIoq2w?si=M_RYeidETcwIa5cl&t=1954][32:34]]

*** Unconditional Control Instructions: Jumps [[https://youtu.be/41RyDXIoq2w?si=vPBKDuJIbeJ2OBKv&t=1964][32:44]]

- ~jal~: unconditional jump and link
- ~jalr~: unconditional jump via register and link
- label encoded as an offset (how far) from current location
- using register for a huge jump


*** Performing Computations on Values in Memory [[https://youtu.be/41RyDXIoq2w?si=B83CNrsamXq0Ql8T&t=2083][34:43]]
Load values from and store them to memory.


*** RISC-V Load and Store Instructions [[https://youtu.be/41RyDXIoq2w?si=RMZplf8y2eAeg88b&t=2223][37:03]]
- RISC-V does /not/ allow to write memory addressed into instructions directly
- Address specified as <base-addr, offest> pair
  + base-addr always stored in a register
  + offset specified as a small constant
  + format:
    - ~lw dest, offest(base)~ load word
    - ~sw src, offset(base)~  store word

#+ORGTBL: risc-v load and store
| Assembly          | Behavior                    |
|-------------------+-----------------------------|
| ~lw x1, 0x4(x0)~  | x1 <--- load(Mem[0x + 0x4]) |
| ~lw x2, 0x8(x0)~  | x1 <--- load(Mem[0x + 0x8]) |
| ~add x3, x1, x2~  | x3 <--- x1 + x3             |
| ~sw x3, 0x10(x0)~ | store(Mem[x0 + 0x10])       |
|-------------------+-----------------------------|

Example at [[https://youtu.be/41RyDXIoq2w?si=LPCTZQKShKgGSOFL&t=2395][39:55]] shows a program that sums array elements using the above memory operations.

*** Constatns and Instructions Encoding Limitations [[https://youtu.be/41RyDXIoq2w?si=7s2c9OnVVtoM_ae-&t=2629][43:49]]
- Instructions encoded as 32 bits
  - operation 10 bits, and
  - 2 source registers (each 5 and 10 bits in total) or 1 source register (5 bits) plus a small constant, or
  - 1 destination register (5 bits)
- Constant in instructions must be < 12 bits.  Big consts stored in memory or register and used explicitly
- The above limitations result in never specifying memory addrs (can be 32 bits) directly into instructions

*** Pseudoinstructions [[https://youtu.be/41RyDXIoq2w?si=5S8MlO9at4AcxMH4&t=2936][48:56]]


** L3 Compiling Code, Procedures, and Stacks
:LOGBOOK:
CLOCK: [2024-01-11 Thu 22:20]--[2024-01-11 Thu 23:13] =>  0:53
:END:
See [[https://6191.mit.edu/_static/fall23/resources/sp23/L10.pdf][Lecture 10 slides]] of the Spring 23

*** RISC-V Recap [[https://youtu.be/GWSrieOIXls?si=sUZhqFDvnKHSEG2e&t=174][2:54]]

*** Dealing with constants

*** Compiling Simple Expressions
- Assign variables to registers
- Translate operators into computational instructions
- Use register-immediate instructions to handle ops with small constatns
- Use ~li~ pseudo-instruction for large constants (See [[https://www.youtube.com/watch?v=GWSrieOIXls&list=PLmQZXrtupiSYcziH3iZZoGTng1D0UnsFJ&index=5&t=194s][Chapter 3]])


*** Implementing procedures
When a procedure (say, ~sum~) is called in many places:
- caller can (unconditionally) jump (ix) to the procedure code, /but/
- to return to the previous place, the called procedure must know which return addrs to use


*Return address must be saved and passed to the called procedure!*


***


*** Procedure Linking
To transfer control to callee (the called procedure) and back to caller
#+BEGIN_EXAMPLE
proc_call: jal ra,label
^^^^^^^^^ procedure label, it is an addr like [0x100]
#+END_EXAMPLE
1. store addr of proc_call + 4 in register ~ra~ (return address register), decided by convention
2. jump to ix at addr label where 'label' is the name of the procedure (~sum~ or ~reduce~, etc.)
3. After executing procedure, ~j ra~ to return to caller and continue execution


*** Procedure calls: Complications
Nested procedure calls will result in later procedure calls override previous addr registers:
Suppose A calls B which calls C, return addr for B will wipe out return addr for A

*** Procedure storage needs
Need a stack to store the necessary information, see [[https://www.youtube.com/watch?v=GWSrieOIXls&list=PLmQZXrtupiSYcziH3iZZoGTng1D0UnsFJ&index=5&t=1931s][32:11]]


*** RISC-V Stack and Use of it [[https://www.youtube.com/watch?v=GWSrieOIXls&list=PLmQZXrtupiSYcziH3iZZoGTng1D0UnsFJ&index=5&t=2277s][37:57]]


*** Calling Convention
See the page 9 of the slides or [[https://www.youtube.com/watch?v=GWSrieOIXls&list=PLmQZXrtupiSYcziH3iZZoGTng1D0UnsFJ&index=5&t=2403s][40:03]]


*** Caller-saved v.s. Callee-saved registers [[https://www.youtube.com/watch?v=GWSrieOIXls&list=PLmQZXrtupiSYcziH3iZZoGTng1D0UnsFJ&index=5&t=2633s][43:53]]

* Miscellaneous
- [[https://www.cl.cam.ac.uk/teaching/1314/P34/bluespec-walkthrough.html][Bluespec Walkthrough]] by Cambridge Computer Lab
- Bluespec support for Emacs
  - Official repo: [[https://github.com/B-Lang-org/bsc/tree/main/util/emacs]]
  - [[https://github.com/joachimschmidt557/bsv-mode/blob/master/bsv-mode.el][joachimschmidt557/bsv-mode]]
- [[https://web.ece.ucsb.edu/its/bluespec/doc/BSV/user-guide.pdf][Bluespec User Guide <PDF>​]]
- [[https://github.com/WangXuan95/BSV_Tutorial_cn][Bluespec SystemVerilog (BSV) 中文教程]]
- [[https://www.bilibili.com/video/BV1u8411i7Qw/?share_source=copy_web&vd_source=8eebf82383d439a01f52d7cc19be4e7a][计算机体系结构: MIT课程学习新手上路宣讲]]
