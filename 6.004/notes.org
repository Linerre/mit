#+TITLE: Notes on Computation Structures
#+AUTHOR: Linerre <zlinerre@gmail.com>

* Announcement
The course was previously known as 6.004 and now its course code has changed to 6.191.  As mentioned by the course's [[https://6191.mit.edu/fall23][official site]]:

#+BEGIN_QUOTE
Welcome to the Fall 2023 semester of 6.1910 which we will call 6.191 (also known as 6.004)!
#+END_QUOTE


* Versions
There are a couple of versions available for this course.  The table below lists a few that can be easily found by a single Google search.

| Year | Site        | Materials             | Lecture Videos |
|------+-------------+-----------------------+----------------|
| 2009 | [[https://ocw.mit.edu/courses/6-004-computation-structures-spring-2009/][2009-Spring]] | [[https://ocw.mit.edu/courses/6-004-computation-structures-spring-2009/download/][MIT OpenCourseWare]]    | NA             |
| 2017 | [[https://ocw.mit.edu/courses/6-004-computation-structures-spring-2017/][2017-Spring]] | [[https://ocw.mit.edu/courses/6-004-computation-structures-spring-2017/pages/syllabus/][MIT OpenCourseWare]][1] | [[https://youtube.com/playlist?list=PLUl4u3cNGP62WVs95MNq3dQBqY2vGOtQ2&si=KLMhgGDRrluA7D_a][YouTube]]        |
| 2018 | NA          | [[https://6191.mit.edu/fall23/resources][6.191 Resources]]       | [[https://youtube.com/playlist?list=PLDSlqjcPpoL64CJdF0Qee5oWqGS6we_Yu&si=JvM51x8XKzCZoZii][YouTube]][2]     |
| 2019 | NA          | [[https://6191.mit.edu/fall23/resources/sp23][6.191 Archives (sp23)]] | [[https://www.youtube.com/playlist?list=PLmQZXrtupiSYcziH3iZZoGTng1D0UnsFJ][YouTube]][3]     |
|------+-------------+-----------------------+----------------|
- [1] The annotated slides are embedded in each lecture.  Navigate the left sidebar to find them.
- [2] The official site (https://6004.mit.edu/web/fall18/resources) mentioned in the video list is /not/ accessible to non-mit students, but under the "Material" tab the required/needed resources are available for download.
- [3] *This is the version I'm learning.*
- [+] Stanford hosts an all-in-one lecture notes in [[https://web.stanford.edu/~lindrew/6.004.pdf][PDF]] for 2020 version of this course.

Matthew Towers in his [[https://www.homepages.ucl.ac.uk/~ucahmto/elearning/2020/04/13/6.004_and_CS143.html][6.004 and CS143 (Compilers)]] post gives a quick rundown of different 6.004 versions and (possible) reasons for why the later versions become more inaccessible (mainly, academic integrity).

In subreddit r/mit there is [[https://www.reddit.com/r/mit/comments/c1nsl3/mit_6004/][this thread]] where different versions were discussed and suggestions were given to students based on their backgrounds (i.e. computer science v.s. electrical engineering).


* Schedule
:LOGBOOK:
CLOCK: [2023-12-22 Fri 15:26]--[2023-12-22 Fri 17:14] =>  1:48
:END:

** Summary
2 lectures and 1 lab each week, as illustrated at [[https://6191.mit.edu/fall23/schedule]]

About 23 topics in total.  The course is usually delivered in Fall and Spring semesters.

** Timetable

#+ORGTBL: SEND lectures orgtbl-to-orgtbl :splice nil :skip 0
| Lec | Topic                                         |      Start |       Done |
|-----+-----------------------------------------------+------------+------------|
| L1  | Course Mechanics & Digital Abstraction        | 2023-12-22 | 2023-12-22 |
| L2  | Combinational Devices & Boolean Algebra       |            |            |
| L2  | Combinational Design & Intro to Minispec      |            |            |
| L4  | Adv Minispec & Combinational Design Tradeoffs |            |            |
| L5  | CMOS                                          |            |            |
| L6  | equential Circuits & Finite State Machines    |            |            |
| L7  | Impl-ing Sequential Circuits in Minispec      |            |            |
| L8  | Arithmetic Pipelines                          |            |            |
| L9  | Design Tradeoffs                              |            |            |
| L10 | Compilers and RISC-V Assembly                 |            |            |
| L11 | Single Cycle Processor                        |            |            |
| L12 | Memory Hierarchy                              |            |            |
| L13 | Caches                                        |            |            |
| L14 | Pipelined Processors 1                        |            |            |
| L15 | Pipelined Processors 2                        |            |            |
| L16 | OS                                            |            |            |
| L17 | Virtual Memory 1                              |            |            |
| L18 | Virtual Memory 2                              |            |            |
| L19 | Exceptions, I/O                               |            |            |
| L20 | Parallel Processing                           |            |            |
| L21 | Synchronization                               |            |            |
| L22 | Cache Coherence                               |            |            |
| L23 | Modern Processor Architecture                 |            |            |
|-----+-----------------------------------------------+------------+------------|

*NOTE*: Labs are accessible to MIT students only.  Non-MIT students should consider doing the [[http://csg.csail.mit.edu/6.175/labs.html][labs of 6.175]] instead, because that course has the same instructor and textbook as 6.004 as well as very similar labs.

#+ORGTBL: labs
| Lab | Topic                    | out | due      |
|-----+--------------------------+-----+----------|
|   1 | Combinational            | L3  | L5       |
|   2 | Arithmetic Logic Unit    | L4  | L7       |
|   3 | Sequential Circuits      | L7  | L10      |
|   4 | Processor Implementation | L11 | L14      |
|   5 | Caches                   | L13 | L16      |
|   6 | Pipelined Processor      | L14 | L20      |
|   7 | Operating Systems        | L16 | L22      |
|   d | Design Project           | L20 | L23+1[+] |
|-----+--------------------------+-----+----------|
- [+] One week after L23


** L1
In the early days people stood in the "bit" to fix it because the machine was huge. Now it is tiny.

Later people found not only data, but also programs could be stored in memory.  Data in memory is read from or written to, but the actual computing is done in registers.  Each register is of fixed size, say 32 bits.  Number of registers is small (limitation), say 32.
- Ld x M[a] (load: read data from memory to register)
- St M[a] x (Store: put data back from register to memory)


An abstracted MicroProcessor is depicted at [[https://youtu.be/n-YWa8hTdH8?si=PisuU1o9pxuod5Hl&t=1291][21:31]] of the first lecture.

Assembly (Machine) Language is a sequence of instructions which execute in a sequential order unless a control transfer instruction ix executed.  Each instruction specifies one of the following:
- ALU or Reg-to-Reg operation
- Ld
- St
- Control transfer operation: e.g. xi < xj go to label l

Assembly language is not designed so that it is "easy to program".  The two points to consider are:
1. suitable for implementing in hardware
2. able to translate high level notations to low level instructions, i.e. a target of some high-level language (see [[https://youtu.be/n-YWa8hTdH8?si=jfmP-_qsanIs7bXJ&t=2558][42:38]])


In general, the course consists of the following modules:
1. RISC-V Intro
   - Introduction to RISC-V and Assembly Language programming in RISC-V
   - Expressing high-level programming in Assembly language
   - Procedure calling convention
2. Bluespec
   - Boolean algebra and combinational logic
   - Sequential logic
   - Expressing logic designs in Bluespec
   - Pipelined and folded circuits
3. Implement RISC-V
   - Implement non-pipelined RISC-V computer
   - Caches
   - Implement pipelined RISC-V computer
   - Branch prediction (time-permitting)
4. OS
   - Operating systems
   - IO
   - Virtual memory


This course relies on [[https://youtu.be/n-YWa8hTdH8?t=2862&si=ocxGOJJxXyDiHKQ4][Modern Design Tools]] (from high-level to circuit description)

[[https://youtu.be/n-YWa8hTdH8?t=3172&si=TqwmwKV_PnP3nBXF][Grading]] is mentioned at the last.


** L2


* Miscellaneous
- [[https://www.cl.cam.ac.uk/teaching/1314/P34/bluespec-walkthrough.html][Bluespec Walkthrough]] by Cambridge Computer Lab
- Bluespec support for Emacs
  - Official repo: [[https://github.com/B-Lang-org/bsc/tree/main/util/emacs]]
  - [[https://github.com/joachimschmidt557/bsv-mode/blob/master/bsv-mode.el][joachimschmidt557/bsv-mode]]
- [[https://web.ece.ucsb.edu/its/bluespec/doc/BSV/user-guide.pdf][Bluespec User Guide <PDF>​]]
- [[https://github.com/WangXuan95/BSV_Tutorial_cn][Bluespec SystemVerilog (BSV) 中文教程]]
- [[https://www.bilibili.com/video/BV1u8411i7Qw/?share_source=copy_web&vd_source=8eebf82383d439a01f52d7cc19be4e7a][计算机体系结构: MIT课程学习新手上路宣讲]]
